name: Run e2e tests
on:
  pull_request:
    branches:
      - dev
    types:
      - opened
      - synchronize
      - edited

env:
  DDC_E2E_TES_ECR_REGISTRY: ${{ secrets.DDC_E2E_TES_ECR_REGISTRY }}
  DDC_E2E_TEST_ECR_REPO: ${{ secrets.DDC_E2E_TEST_ECR_REPO }}
  DDC_NODE_ECR_REGISTRY: ${{ secrets.DDC_NODE_ECR_REGISTRY }}
  DDC_NODE_ECR_REPO: ${{ secrets.DDC_NODE_ECR_REPO }}
  POS_NODE_ECR_REGISTRY: ${{ secrets.POS_NODE_ECR_REGISTRY }}
  POS_NODE_ECR_REPO: ${{ secrets.POS_NODE_ECR_REPO }}
  DDC_SMART_CONTRACT_ECR_REGISTRY: ${{ secrets.DDC_SMART_CONTRACT_ECR_REGISTRY }}
  DDC_SMART_CONTRACT_ECR_REPO: ${{ secrets.DDC_SMART_CONTRACT_ECR_REPO }}
  DDC_SMART_CONTRACT_VERSION: ${{ github.sha }}
  DDC_NODE_VERSION: dev-latest
  POS_NODE_VERSION: latest
  DDC_E2E_TEST_VERSION: latest

jobs:
  build-and-test-image:
    runs-on: ubuntu-18.04
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Cargo Cache
        uses: actions/cache@v1
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
            ${{ runner.os }}-cargo
      - name: Checkout code base
        uses: actions/checkout@v2
        with:
          path: ddc-smart-contract
      - name: Build docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        uses: docker/build-push-action@v2
        with:
          context: ./ddc-smart-contract
          file: ./ddc-smart-contract/Dockerfile
          push: false
          no-cache: true
          build-args: |
            NPM_TOKEN=${{ secrets.NPM_TOKEN }}
          tags: ${{ env.DDC_SMART_CONTRACT_ECR_REGISTRY }}/${{ env.DDC_SMART_CONTRACT_ECR_REPO }}:${{ env.DDC_SMART_CONTRACT_VERSION }}
      - name: Checkout e2e tests
        uses: actions/checkout@v2
        with:
          repository: Cerebellum-Network/ddc-e2e-tests
          path: ddc-e2e-tests
          token: ${{ secrets.TRIGGER_GITHUB_TOKEN }}
      - name: Run ddc e2e tests
        working-directory: ./ddc-e2e-tests
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "Installing helper packaging curl wget findutils jq"
          sudo apt-get install curl wget findutils jq

          echo "Start infrustrucuture , DDC_SMART_CONTRACT_VERSION=$DDC_SMART_CONTRACT_VERSION, POS_NODE_VERSION=$POS_NODE_VERSION, DDC_NODE_VERSION=$DDC_NODE_VERSION"
          . ./scripts/start-infrastructure.sh $DDC_SMART_CONTRACT_VERSION $POS_NODE_VERSION $DDC_NODE_VERSION $DDC_E2E_TEST_VERSION

          echo "Start Full flow"
          . ./scripts/start-full-flow.sh

          echo "Stop infrustracture"
          . ./scripts/stop-infrastructure.sh
      - name: Slack Notification Success
        if: ${{ success() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: e2e-test-results
          SLACK_COLOR: "#00FF00"
          SLACK_MESSAGE: 'Run e2e DDC tests with params:
          DDC_SMART_CONTRACT_VERSION="${{ env.DDC_SMART_CONTRACT_VERSION }}",
          POS_NODE_VERSION="${{ env.POS_NODE_VERSION }}",
          DDC_NODE_VERSION="${{ env.DDC_NODE_VERSION }}"'
          SLACK_TITLE: 'Test Results for "${{github.repository}}"'
          SLACK_USERNAME: e2e-ddc-tests-bot
      - name: Slack Notification Failure
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: e2e-test-results
          SLACK_LINK_NAMES: true
          SLACK_COLOR: "#FF0000"
          SLACK_MESSAGE: 'Run e2e DDC tests with params:
          DDC_SMART_CONTRACT_VERSION="${{ env.DDC_SMART_CONTRACT_VERSION }}",
          POS_NODE_VERSION="${{ env.POS_NODE_VERSION }}",
          DDC_NODE_VERSION="${{ env.DDC_NODE_VERSION }}". Responsible persons: <@UM0FVG0CD>, <@U01UG95HTM1>, <@U011DQ8QZD4>.'
          SLACK_TITLE: 'Test Results for "${{github.repository}}"'
          SLACK_USERNAME: e2e-ddc-tests-bot
